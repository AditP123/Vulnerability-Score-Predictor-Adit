import streamlit as st
import pandas as pd
import requests
from dotenv import load_dotenv
import os

load_dotenv()
api_ip = os.getenv('API_IP')

st.title("Welcome to Threat Doctor")
st.markdown('<span style="font-size: 22px;">In the digital age, safeguarding user data and maintaining cybersecurity is crucial. Threat Doctor is a powerful tool designed to assess the vulnerability of users based on their exposure to various cyber threats. By analyzing different types of threats and their severity, Threat Doctor provides a normalized vulnerability score for each user, helping security teams prioritize their efforts and mitigate risks effectively.</span>', unsafe_allow_html=True)

df = pd.DataFrame()
tab1, tab2 = st.tabs(["Manually Enter Input", "File Upload Dataset"])

with tab1:
    UPN = st.text_input("Enter the UPN")
    if 'table_data' not in st.session_state:
        st.session_state['table_data'] = pd.DataFrame(columns=['Description', 'Count'])
    if 'show_form' not in st.session_state:
        st.session_state['show_form'] = False
    if 'show_delete_index' not in st.session_state:
        st.session_state['show_delete_index'] = False

# Function to handle the form submission
    def handle_form_submit(description, count):
        new_entry = pd.DataFrame({'Description': [description], 'Count': [count]})
        st.session_state['table_data'] = pd.concat([st.session_state['table_data'], new_entry], ignore_index=True)
        st.session_state['show_form'] = False
        st.rerun()

# Button to show the form
    if st.button("Add Entry"):
        st.session_state['show_form'] = True

# Display the form only if 'show_form' is True
    if st.session_state['show_form']:
        with st.form(key='new_entry_form'):
            description = st.text_input("Description Type")
            count = st.number_input("Count", min_value=0, step=1)
            submitted = st.form_submit_button("Submit Entry")

            if submitted:
                handle_form_submit(description, count)

# Button to show the delete index and another button to predict score
    if not st.session_state['table_data'].empty:
        #st.write(f"Current Table Data for {f"UPN: {UPN}" if not UPN == "" else "User"}")
        st.dataframe(st.session_state['table_data'])
        if st.button("Delete Row"):
            st.session_state['show_delete_index'] = True
        if not st.session_state['show_delete_index'] and st.button("Predict Scores"):
            UPN_count = st.session_state['table_data']['Count'].sum()
            st.write(UPN_count)
            # scores_JSON = [
            #     {'Model Name': 'Bayesian ARD', 'Predicted Score': 0.7231},
            #     {'Model Name': 'Linear Regression', 'Predicted Score': 0.7812},
            #     {'Model Name': 'SDG Regression', 'Predicted Score': 0.7519},
            #     {'Model Name': 'Polynomial Regression', 'Predicted Score': 0.7782}
            # ]
            response = requests.get(f"{api_ip}/single_response/{UPN_count}")
            if response.status_code == 200:
                scores_JSON = response.json()
            else:
                st.write("status code not 200")
            if scores_JSON:
                scores_dict = {}
                scores_dict['Model Name'] = []
                scores_dict['Predicted Score'] = []
                for dict in scores_JSON:
                    scores_dict['Model Name'].append(dict['Model Name'])
                    scores_dict['Predicted Score'].append(dict['Predicted Score'])
                df = pd.DataFrame(scores_dict)
                # st.subheader(f'Models and their Predicted vulnerability scores for {UPN if UPN != '' else 'the User'}')
                st.dataframe(df)
            else:
                st.write("Uh Oh Something's wrong")
            

# Only show the delete index input if 'show_delete_index' is True
    if st.session_state['show_delete_index'] and not st.session_state['table_data'].empty:
        delete_index = st.number_input("Enter the index of the row to delete (starting from 0):", min_value=0, max_value=len(st.session_state['table_data'])-1, step=1, format='%d')
        if st.button("Confirm Delete"):
            if 0 <= delete_index < len(st.session_state['table_data']):
                st.session_state['table_data'] = st.session_state['table_data'].drop(index=delete_index).reset_index(drop=True)
                st.session_state['show_delete_index'] = False
                st.rerun()
        if st.button("Clear All"):
            st.session_state['table_data'] = pd.DataFrame(columns=['Description', 'Count'])
            st.session_state['show_delete_index'] = False
            st.rerun()

with tab2:
    uploaded_file = st.file_uploader(label = "Choose a CSV ", type = ['.csv'])
    if uploaded_file is not None:
        st.write('File uploaded', uploaded_file.name)
        # Post the file to the FastAPI server
        files = {"file": uploaded_file.getvalue()}
        response = requests.post( f"{api_ip}/uploadfile/", files=files)

        if response.status_code == 200:
            st.write("File successfully sent to the server")

            # Prepare download link
            st.download_button(
                label="Download processed file",
                data=response.content,
                file_name=uploaded_file.name,
                mime="application/octet-stream"
            )